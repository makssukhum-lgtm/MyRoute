import os
import logging
from dotenv import load_dotenv
from asgiref.sync import sync_to_async

from django.core.management.base import BaseCommand
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à—É –º–æ–¥–µ–ª—å User –∏–∑ Django
from users.models import User

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—Å–æ—Å—Ç–æ—è–Ω–∏—è" –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
SELECTING_LANGUAGE, REQUESTING_PHONE, SELECTING_ROLE = range(3)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –°–ò–ù–•–†–û–ù–ù–û–ô —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–±—ã—á–Ω–æ–º, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.

def get_user(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    try:
        return User.objects.get(telegram_id=telegram_id)
    except User.DoesNotExist:
        return None

def create_user(telegram_id, name):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    return User.objects.create(telegram_id=telegram_id, name=name)

def update_user_language(user, language_code):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user.language = language_code
    user.save()

def update_user_phone(user, phone_number):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user.phone_number = phone_number
    user.save()

def update_user_role(user, role):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user.role = role
    user.save()

# --- –°–æ–∑–¥–∞–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ï "–æ–±–µ—Ä—Ç–∫–∏" –¥–ª—è –Ω–∞—à–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
# –≠—Ç–æ "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏", –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–¥ Django –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
get_user_async = sync_to_async(get_user, thread_sensitive=True)
create_user_async = sync_to_async(create_user, thread_sensitive=True)
update_user_language_async = sync_to_async(update_user_language, thread_sensitive=True)
update_user_phone_async = sync_to_async(update_user_phone, thread_sensitive=True)
update_user_role_async = sync_to_async(update_user_role, thread_sensitive=True)


# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç async-–æ–±–µ—Ä—Ç–∫–∏) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    telegram_user = update.effective_user
    
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –í–ï–†–°–ò–Æ
    user = await get_user_async(telegram_user.id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –í–ï–†–°–ò–Æ
        await create_user_async(telegram_user.id, telegram_user.full_name)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        keyboard = [
            [KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton("O'zbekcha üá∫üáø"), KeyboardButton("–¢–æ“∑–∏–∫”£ üáπüáØ")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:", reply_markup=reply_markup)
        
        return SELECTING_LANGUAGE

async def select_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    language_map = {
        "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
        "O'zbekcha üá∫üáø": "uz",
        "–¢–æ“∑–∏–∫”£ üáπüáØ": "tj",
    }
    selected_language = update.message.text
    language_code = language_map.get(selected_language)

    if not language_code:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return SELECTING_LANGUAGE

    user = await get_user_async(update.effective_user.id)
    await update_user_language_async(user, language_code)
    
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=reply_markup
    )
    return REQUESTING_PHONE

async def request_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å."""
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")
        return REQUESTING_PHONE

    phone_number = contact.phone_number
    user = await get_user_async(update.effective_user.id)
    await update_user_phone_async(user, phone_number)

    keyboard = [[KeyboardButton("–Ø –ü–∞—Å—Å–∞–∂–∏—Ä üßç"), KeyboardButton("–Ø –í–æ–¥–∏—Ç–µ–ª—å üöï")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ö–µ–º –≤—ã –±—É–¥–µ—Ç–µ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ?", reply_markup=reply_markup)
    return SELECTING_ROLE

async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–æ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    role_map = {
        "–Ø –ü–∞—Å—Å–∞–∂–∏—Ä üßç": User.Role.PASSENGER,
        "–Ø –í–æ–¥–∏—Ç–µ–ª—å üöï": User.Role.DRIVER,
    }
    selected_role_text = update.message.text
    role = role_map.get(selected_role_text)

    if not role:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return SELECTING_ROLE
        
    user = await get_user_async(update.effective_user.id)
    await update_user_role_async(user, role)

    await update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


class Command(BaseCommand):
    """Django-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞."""
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        self.stdout.write("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
        load_dotenv()
        bot_token = os.getenv("BOT_TOKEN")

        if not bot_token:
            self.stderr.write(self.style.ERROR("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return

        application = Application.builder().token(bot_token).build()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                SELECTING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_language)],
                REQUESTING_PHONE: [MessageHandler(filters.CONTACT | filters.TEXT, request_phone_number)],
                SELECTING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        application.add_handler(conv_handler)
        
        self.stdout.write(self.style.SUCCESS("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."))
        application.run_polling()

