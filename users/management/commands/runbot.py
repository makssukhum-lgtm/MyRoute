import os
import logging
from dotenv import load_dotenv
from asgiref.sync import sync_to_async

from django.core.management.base import BaseCommand
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à—É –º–æ–¥–µ–ª—å User –∏–∑ Django
from users.models import User

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
FIND_TRIP_BTN = "–ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É üîç"
MY_BOOKINGS_BTN = "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üóíÔ∏è"
CREATE_TRIP_BTN = "–°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ûï"
MY_TRIPS_BTN = "–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏ üöï"
MY_PROFILE_BTN = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"
# –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
CHANGE_ROLE_BTN = "–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚úèÔ∏è"
BACK_TO_MENU_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


# --- –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
(
    MAIN_MENU,
    PROFILE_MENU,
    SELECTING_LANGUAGE,
    REQUESTING_PHONE,
    SELECTING_ROLE,
) = range(5)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_user(telegram_id):
    try:
        return User.objects.get(telegram_id=telegram_id)
    except User.DoesNotExist:
        return None

def create_user(telegram_id, name):
    return User.objects.create(telegram_id=telegram_id, name=name)

def update_user_language(user, language_code):
    user.language = language_code
    user.save()

def update_user_phone(user, phone_number):
    user.phone_number = phone_number
    user.save()

def update_user_role(user, role):
    user.role = role
    user.save()

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ "–æ–±–µ—Ä—Ç–∫–∏" –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
get_user_async = sync_to_async(get_user, thread_sensitive=True)
create_user_async = sync_to_async(create_user, thread_sensitive=True)
update_user_language_async = sync_to_async(update_user_language, thread_sensitive=True)
update_user_phone_async = sync_to_async(update_user_phone, thread_sensitive=True)
update_user_role_async = sync_to_async(update_user_role, thread_sensitive=True)


# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MAIN_MENU."""
    user = await get_user_async(update.effective_user.id)
    
    if user.role == User.Role.PASSENGER:
        keyboard = [
            [KeyboardButton(FIND_TRIP_BTN)],
            [KeyboardButton(MY_BOOKINGS_BTN), KeyboardButton(MY_PROFILE_BTN)],
        ]
        menu_text = "–ú–µ–Ω—é –ø–∞—Å—Å–∞–∂–∏—Ä–∞:"
    elif user.role == User.Role.DRIVER:
        keyboard = [
            [KeyboardButton(CREATE_TRIP_BTN)],
            [KeyboardButton(MY_TRIPS_BTN), KeyboardButton(MY_PROFILE_BTN)],
        ]
        menu_text = "–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è:"
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(menu_text, reply_markup=reply_markup)
    return MAIN_MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç."""
    telegram_user = update.effective_user
    user = await get_user_async(telegram_user.id)

    if user and user.role:
        return await show_main_menu(update, context)
    else:
        return await start_registration(update, context)

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    user = await get_user_async(user_id)
    if not user:
        await create_user_async(user_id, user_name)
    
    keyboard = [[KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton("O'zbekcha üá∫üáø"), KeyboardButton("–¢–æ“∑–∏–∫”£ üáπüáØ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:", reply_markup=reply_markup)
    return SELECTING_LANGUAGE

# ... —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (select_language, request_phone_number, select_role) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
async def select_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    language_map = { "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru", "O'zbekcha üá∫üáø": "uz", "–¢–æ“∑–∏–∫”£ üáπüáØ": "tj" }
    language_code = language_map.get(update.message.text)
    if not language_code:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return SELECTING_LANGUAGE
    user = await get_user_async(update.effective_user.id)
    await update_user_language_async(user, language_code)
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=reply_markup)
    return REQUESTING_PHONE

async def request_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")
        return REQUESTING_PHONE
    user = await get_user_async(update.effective_user.id)
    await update_user_phone_async(user, contact.phone_number)
    keyboard = [[KeyboardButton("–Ø –ü–∞—Å—Å–∞–∂–∏—Ä üßç"), KeyboardButton("–Ø –í–æ–¥–∏—Ç–µ–ª—å üöï")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ö–µ–º –≤—ã –±—É–¥–µ—Ç–µ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ?", reply_markup=reply_markup)
    return SELECTING_ROLE

async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role_map = { "–Ø –ü–∞—Å—Å–∞–∂–∏—Ä üßç": User.Role.PASSENGER, "–Ø –í–æ–¥–∏—Ç–µ–ª—å üöï": User.Role.DRIVER }
    role = role_map.get(update.message.text)
    if not role:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return SELECTING_ROLE
    user = await get_user_async(update.effective_user.id)
    await update_user_role_async(user, role)
    await update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove()
    )
    return await show_main_menu(update, context)

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" ---
async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user = await get_user_async(update.effective_user.id)
    
    # get_role_display() - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Django, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç "–ü–∞—Å—Å–∞–∂–∏—Ä" –∏–ª–∏ "–í–æ–¥–∏—Ç–µ–ª—å"
    role_text = user.get_role_display() 
    
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"<b>–ò–º—è:</b> {user.name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
        f"<b>–†–æ–ª—å:</b> {role_text}"
    )

    keyboard = [
        [KeyboardButton(CHANGE_ROLE_BTN)],
        [KeyboardButton(BACK_TO_MENU_BTN)],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(profile_text, parse_mode='HTML', reply_markup=reply_markup)
    
    return PROFILE_MENU

async def change_role_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏."""
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    return PROFILE_MENU

async def placeholder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await update.message.reply_text(f"–í—ã –Ω–∞–∂–∞–ª–∏ '{update.message.text}'. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await show_main_menu(update, context)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        self.stdout.write("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
        load_dotenv()
        bot_token = os.getenv("BOT_TOKEN")

        if not bot_token:
            self.stderr.write(self.style.ERROR("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return

        application = Application.builder().token(bot_token).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                SELECTING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_language)],
                REQUESTING_PHONE: [MessageHandler(filters.CONTACT, request_phone_number)],
                SELECTING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
                
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                MAIN_MENU: [
                    MessageHandler(filters.Regex(f"^{MY_PROFILE_BTN}$"), my_profile), # <-- –ó–ê–ú–ï–ù–ò–õ–ò –ó–ê–ì–õ–£–®–ö–£
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏
                    MessageHandler(filters.Regex(f"^{FIND_TRIP_BTN}$"), placeholder_handler),
                    MessageHandler(filters.Regex(f"^{MY_BOOKINGS_BTN}$"), placeholder_handler),
                    MessageHandler(filters.Regex(f"^{CREATE_TRIP_BTN}$"), placeholder_handler),
                    MessageHandler(filters.Regex(f"^{MY_TRIPS_BTN}$"), placeholder_handler),
                ],

                # –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
                PROFILE_MENU: [
                    MessageHandler(filters.Regex(f"^{CHANGE_ROLE_BTN}$"), change_role_placeholder),
                    MessageHandler(filters.Regex(f"^{BACK_TO_MENU_BTN}$"), show_main_menu), # <-- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        application.add_handler(conv_handler)
        
        self.stdout.write(self.style.SUCCESS("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."))
        application.run_polling()

